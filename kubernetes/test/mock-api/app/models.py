# Copyright 2025 Janos Czentye
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# generated by fastapi-codegen:
#   filename:  ../spec/openapi_design.json
#   timestamp: 2025-05-20T13:46:51+00:00
from __future__ import annotations

from typing import Dict, Optional, Union
from uuid import UUID

import fastapi
from pydantic import BaseModel, Field, RootModel, conint

from . import __version__


class VersionResponse(BaseModel):
    api: str = Field(default_factory=lambda: __version__, title='Api')
    framework: str = Field(default_factory=lambda: fastapi.__version__, title='Framework')


########################################################################################################################

class ExecutionMetrics(BaseModel):
    elapsedTime: Optional[conint(ge=0)] = Field(None, description='Elapsed time of the function', examples=[42])
    ret: Optional[conint(ge=0, le=255)] = Field(None, description='Return value of the function', examples=[0])


class ExecutionResult(BaseModel):
    data: str = Field(..., description='Unique reference/ID of the data', examples=['Data42'])
    function: str = Field(...,
                          description='Unique reference/ID of the function to be applied to the private data',
                          examples=['FunctionData42'], )
    metrics: Optional[ExecutionMetrics] = None
    uuid: UUID = Field(..., description='Unique operation identifier',
                       examples=['11111111-2222-3333-4444-555555555555'])


class PrivateExecutionResult(BaseModel):
    function: str = Field(...,
                          description='Unique reference/ID of the function to be applied to the private data',
                          examples=['FunctionData42'])
    metrics: Optional[ExecutionMetrics] = None
    private_data: str = Field(..., description='Unique reference/ID of the data', examples=['Data42'])
    uuid: UUID = Field(...,
                       description='Unique operation identifier',
                       examples=['11111111-2222-3333-4444-555555555555'])


########################################################################################################################

class Metadata(RootModel[Optional[Dict[str, Union[str, int]]]]):
    root: Optional[Dict[str, Union[str, int]]] = None


class ExecutionRequestBody(BaseModel):
    data: str = Field(..., description='Unique reference/ID of the data', examples=['Data42'])
    data_contract: str = Field(..., description='Unique contract ID', examples=['Contract42'])
    func_contract: str = Field(..., description='Unique contract ID', examples=['Contract42'])
    function: str = Field(...,
                          description='Unique reference/ID of the function to be applied to the private data',
                          examples=['FunctionData42'])
    metadata: Optional[Metadata] = None


class PrivateExecutionRequestBody(BaseModel):
    consent: str = Field(..., description='Unique consent ID', examples=['Consent42'])
    data_contract: str = Field(..., description='Unique contract ID', examples=['Contract42'])
    func_contract: str = Field(..., description='Unique contract ID', examples=['Contract42'])
    function: str = Field(...,
                          description='Unique reference/ID of the function to be applied to the private data',
                          examples=['FunctionData42'])
    metadata: Optional[Metadata] = None
    private_data: str = Field(..., description='Unique reference/ID of the data', examples=['Data42'])
    token: str = Field(...,
                       description="Unique token created by the DataProvider related to the user's consent",
                       examples=['Token42'])
