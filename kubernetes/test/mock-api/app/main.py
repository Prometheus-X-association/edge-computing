# Copyright 2025 Janos Czentye
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# generated by fastapi-codegen:
#   filename:  openapi_design.json
#   timestamp: 2025-05-20T13:46:51+00:00
from __future__ import annotations

import fastapi
from starlette import status

from . import ROUTE_PREFIX, __version__
from .models import (ExecutionRequestBody, ExecutionResult, PrivateExecutionRequestBody, PrivateExecutionResult,
                     VersionResponse)

app = fastapi.FastAPI(contact={'email': 'czentye.janos@vik.bme.hu'},
                      description='The Edge Computing (Decentralized AI processing) BB-02 provides value-added services'
                                  ' exploiting an underlying distributed edge computing infrastructure.',
                      title='PTX Edge Computing REST-API',
                      version=__version__,
                      root_path=ROUTE_PREFIX,
                      servers=[dict(url=ROUTE_PREFIX,
                                    description="PTX Edge Computing")],
                      docs_url="/ui/",
                      redoc_url="/ui/")


@app.get('/versions', response_model=VersionResponse, status_code=status.HTTP_200_OK)
async def get_versions_versions_get() -> VersionResponse:
    """Versions of the REST-API component"""
    return VersionResponse(api=__version__, framework=fastapi.__version__)


########################################################################################################################

@app.post('/requestEdgeProc', response_model=None, responses={'202': {'model': ExecutionResult}},
          tags=['customerAPI'])
def request_edge_proc(body: ExecutionRequestBody) -> ExecutionResult:
    """
    Execute function on data
    """
    pass


@app.post('/requestPrivacyEdgeProc', response_model=None, responses={'202': {'model': PrivateExecutionResult}},
          tags=['customerAPI'])
def request_privacy_edge_proc(body: PrivateExecutionRequestBody) -> PrivateExecutionResult:
    """
    Execute function on private data
    """
    pass
