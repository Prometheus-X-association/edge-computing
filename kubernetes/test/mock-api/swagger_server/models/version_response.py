# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from swagger_server import util
from swagger_server.models.base_model_ import Model


class VersionResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api: str = None, framework: str = None):  # noqa: E501
        """VersionResponse - a model defined in Swagger

        :param api: The api of this VersionResponse.  # noqa: E501
        :type api: str
        :param framework: The framework of this VersionResponse.  # noqa: E501
        :type framework: str
        """
        self.swagger_types = {
            'api': str,
            'framework': str
        }

        self.attribute_map = {
            'api': 'api',
            'framework': 'framework'
        }
        self._api = api
        self._framework = framework

    @classmethod
    def from_dict(cls, dikt) -> 'VersionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VersionResponse of this VersionResponse.  # noqa: E501
        :rtype: VersionResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api(self) -> str:
        """Gets the api of this VersionResponse.


        :return: The api of this VersionResponse.
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api: str):
        """Sets the api of this VersionResponse.


        :param api: The api of this VersionResponse.
        :type api: str
        """
        if api is None:
            raise ValueError("Invalid value for `api`, must not be `None`")  # noqa: E501

        self._api = api

    @property
    def framework(self) -> str:
        """Gets the framework of this VersionResponse.


        :return: The framework of this VersionResponse.
        :rtype: str
        """
        return self._framework

    @framework.setter
    def framework(self, framework: str):
        """Sets the framework of this VersionResponse.


        :param framework: The framework of this VersionResponse.
        :type framework: str
        """
        if framework is None:
            raise ValueError("Invalid value for `framework`, must not be `None`")  # noqa: E501

        self._framework = framework
