# coding: utf-8

"""
    Edge Computing REST-API

    The Edge Computing (Decentralized AI processing) BB-02 provides value-added services exploiting an underlying distributed edge computing infrastructure.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: czentye.janos@vik.bme.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrivateExecutionRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'function': 'FunctionID',
        'private_data': 'DataID',
        'data_contract': 'ContractID',
        'func_contract': 'ContractID',
        'consent': 'ConsentID',
        'token': 'AccessToken'
    }

    attribute_map = {
        'function': 'function',
        'private_data': 'private_data',
        'data_contract': 'data_contract',
        'func_contract': 'func_contract',
        'consent': 'consent',
        'token': 'token'
    }

    def __init__(self, function=None, private_data=None, data_contract=None, func_contract=None, consent=None, token=None):  # noqa: E501
        """PrivateExecutionRequestBody - a model defined in Swagger"""  # noqa: E501
        self._function = None
        self._private_data = None
        self._data_contract = None
        self._func_contract = None
        self._consent = None
        self._token = None
        self.discriminator = None
        if function is not None:
            self.function = function
        if private_data is not None:
            self.private_data = private_data
        if data_contract is not None:
            self.data_contract = data_contract
        if func_contract is not None:
            self.func_contract = func_contract
        if consent is not None:
            self.consent = consent
        if token is not None:
            self.token = token

    @property
    def function(self):
        """Gets the function of this PrivateExecutionRequestBody.  # noqa: E501


        :return: The function of this PrivateExecutionRequestBody.  # noqa: E501
        :rtype: FunctionID
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this PrivateExecutionRequestBody.


        :param function: The function of this PrivateExecutionRequestBody.  # noqa: E501
        :type: FunctionID
        """

        self._function = function

    @property
    def private_data(self):
        """Gets the private_data of this PrivateExecutionRequestBody.  # noqa: E501


        :return: The private_data of this PrivateExecutionRequestBody.  # noqa: E501
        :rtype: DataID
        """
        return self._private_data

    @private_data.setter
    def private_data(self, private_data):
        """Sets the private_data of this PrivateExecutionRequestBody.


        :param private_data: The private_data of this PrivateExecutionRequestBody.  # noqa: E501
        :type: DataID
        """

        self._private_data = private_data

    @property
    def data_contract(self):
        """Gets the data_contract of this PrivateExecutionRequestBody.  # noqa: E501


        :return: The data_contract of this PrivateExecutionRequestBody.  # noqa: E501
        :rtype: ContractID
        """
        return self._data_contract

    @data_contract.setter
    def data_contract(self, data_contract):
        """Sets the data_contract of this PrivateExecutionRequestBody.


        :param data_contract: The data_contract of this PrivateExecutionRequestBody.  # noqa: E501
        :type: ContractID
        """

        self._data_contract = data_contract

    @property
    def func_contract(self):
        """Gets the func_contract of this PrivateExecutionRequestBody.  # noqa: E501


        :return: The func_contract of this PrivateExecutionRequestBody.  # noqa: E501
        :rtype: ContractID
        """
        return self._func_contract

    @func_contract.setter
    def func_contract(self, func_contract):
        """Sets the func_contract of this PrivateExecutionRequestBody.


        :param func_contract: The func_contract of this PrivateExecutionRequestBody.  # noqa: E501
        :type: ContractID
        """

        self._func_contract = func_contract

    @property
    def consent(self):
        """Gets the consent of this PrivateExecutionRequestBody.  # noqa: E501


        :return: The consent of this PrivateExecutionRequestBody.  # noqa: E501
        :rtype: ConsentID
        """
        return self._consent

    @consent.setter
    def consent(self, consent):
        """Sets the consent of this PrivateExecutionRequestBody.


        :param consent: The consent of this PrivateExecutionRequestBody.  # noqa: E501
        :type: ConsentID
        """

        self._consent = consent

    @property
    def token(self):
        """Gets the token of this PrivateExecutionRequestBody.  # noqa: E501


        :return: The token of this PrivateExecutionRequestBody.  # noqa: E501
        :rtype: AccessToken
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PrivateExecutionRequestBody.


        :param token: The token of this PrivateExecutionRequestBody.  # noqa: E501
        :type: AccessToken
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrivateExecutionRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateExecutionRequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
