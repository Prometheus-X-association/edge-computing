# coding: utf-8

"""
    Edge Computing REST-API

    The Edge Computing (Decentralized AI processing) BB-02 provides value-added services exploiting an underlying distributed edge computing infrastructure.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: czentye.janos@vik.bme.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrivateExecutionResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'OperationID',
        'function': 'FunctionID',
        'private_data': 'DataID',
        'metrics': 'ExecutionMetrics'
    }

    attribute_map = {
        'uuid': 'uuid',
        'function': 'function',
        'private_data': 'private_data',
        'metrics': 'metrics'
    }

    def __init__(self, uuid=None, function=None, private_data=None, metrics=None):  # noqa: E501
        """PrivateExecutionResult - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._function = None
        self._private_data = None
        self._metrics = None
        self.discriminator = None
        self.uuid = uuid
        self.function = function
        self.private_data = private_data
        if metrics is not None:
            self.metrics = metrics

    @property
    def uuid(self):
        """Gets the uuid of this PrivateExecutionResult.  # noqa: E501


        :return: The uuid of this PrivateExecutionResult.  # noqa: E501
        :rtype: OperationID
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PrivateExecutionResult.


        :param uuid: The uuid of this PrivateExecutionResult.  # noqa: E501
        :type: OperationID
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def function(self):
        """Gets the function of this PrivateExecutionResult.  # noqa: E501


        :return: The function of this PrivateExecutionResult.  # noqa: E501
        :rtype: FunctionID
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this PrivateExecutionResult.


        :param function: The function of this PrivateExecutionResult.  # noqa: E501
        :type: FunctionID
        """
        if function is None:
            raise ValueError("Invalid value for `function`, must not be `None`")  # noqa: E501

        self._function = function

    @property
    def private_data(self):
        """Gets the private_data of this PrivateExecutionResult.  # noqa: E501


        :return: The private_data of this PrivateExecutionResult.  # noqa: E501
        :rtype: DataID
        """
        return self._private_data

    @private_data.setter
    def private_data(self, private_data):
        """Sets the private_data of this PrivateExecutionResult.


        :param private_data: The private_data of this PrivateExecutionResult.  # noqa: E501
        :type: DataID
        """
        if private_data is None:
            raise ValueError("Invalid value for `private_data`, must not be `None`")  # noqa: E501

        self._private_data = private_data

    @property
    def metrics(self):
        """Gets the metrics of this PrivateExecutionResult.  # noqa: E501


        :return: The metrics of this PrivateExecutionResult.  # noqa: E501
        :rtype: ExecutionMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this PrivateExecutionResult.


        :param metrics: The metrics of this PrivateExecutionResult.  # noqa: E501
        :type: ExecutionMetrics
        """

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrivateExecutionResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateExecutionResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
