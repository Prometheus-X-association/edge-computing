# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.access_token import AccessToken  # noqa: F401,E501
from swagger_server.models.consent_id import ConsentID  # noqa: F401,E501
from swagger_server.models.contract_id import ContractID  # noqa: F401,E501
from swagger_server.models.data_id import DataID  # noqa: F401,E501
from swagger_server.models.function_id import FunctionID  # noqa: F401,E501
from swagger_server import util


class PrivateExecutionRequestBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, function: FunctionID=None, private_data: DataID=None, data_contract: ContractID=None, func_contract: ContractID=None, consent: ConsentID=None, token: AccessToken=None):  # noqa: E501
        """PrivateExecutionRequestBody - a model defined in Swagger

        :param function: The function of this PrivateExecutionRequestBody.  # noqa: E501
        :type function: FunctionID
        :param private_data: The private_data of this PrivateExecutionRequestBody.  # noqa: E501
        :type private_data: DataID
        :param data_contract: The data_contract of this PrivateExecutionRequestBody.  # noqa: E501
        :type data_contract: ContractID
        :param func_contract: The func_contract of this PrivateExecutionRequestBody.  # noqa: E501
        :type func_contract: ContractID
        :param consent: The consent of this PrivateExecutionRequestBody.  # noqa: E501
        :type consent: ConsentID
        :param token: The token of this PrivateExecutionRequestBody.  # noqa: E501
        :type token: AccessToken
        """
        self.swagger_types = {
            'function': FunctionID,
            'private_data': DataID,
            'data_contract': ContractID,
            'func_contract': ContractID,
            'consent': ConsentID,
            'token': AccessToken
        }

        self.attribute_map = {
            'function': 'function',
            'private_data': 'private_data',
            'data_contract': 'data_contract',
            'func_contract': 'func_contract',
            'consent': 'consent',
            'token': 'token'
        }
        self._function = function
        self._private_data = private_data
        self._data_contract = data_contract
        self._func_contract = func_contract
        self._consent = consent
        self._token = token

    @classmethod
    def from_dict(cls, dikt) -> 'PrivateExecutionRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PrivateExecutionRequestBody of this PrivateExecutionRequestBody.  # noqa: E501
        :rtype: PrivateExecutionRequestBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def function(self) -> FunctionID:
        """Gets the function of this PrivateExecutionRequestBody.


        :return: The function of this PrivateExecutionRequestBody.
        :rtype: FunctionID
        """
        return self._function

    @function.setter
    def function(self, function: FunctionID):
        """Sets the function of this PrivateExecutionRequestBody.


        :param function: The function of this PrivateExecutionRequestBody.
        :type function: FunctionID
        """

        self._function = function

    @property
    def private_data(self) -> DataID:
        """Gets the private_data of this PrivateExecutionRequestBody.


        :return: The private_data of this PrivateExecutionRequestBody.
        :rtype: DataID
        """
        return self._private_data

    @private_data.setter
    def private_data(self, private_data: DataID):
        """Sets the private_data of this PrivateExecutionRequestBody.


        :param private_data: The private_data of this PrivateExecutionRequestBody.
        :type private_data: DataID
        """

        self._private_data = private_data

    @property
    def data_contract(self) -> ContractID:
        """Gets the data_contract of this PrivateExecutionRequestBody.


        :return: The data_contract of this PrivateExecutionRequestBody.
        :rtype: ContractID
        """
        return self._data_contract

    @data_contract.setter
    def data_contract(self, data_contract: ContractID):
        """Sets the data_contract of this PrivateExecutionRequestBody.


        :param data_contract: The data_contract of this PrivateExecutionRequestBody.
        :type data_contract: ContractID
        """

        self._data_contract = data_contract

    @property
    def func_contract(self) -> ContractID:
        """Gets the func_contract of this PrivateExecutionRequestBody.


        :return: The func_contract of this PrivateExecutionRequestBody.
        :rtype: ContractID
        """
        return self._func_contract

    @func_contract.setter
    def func_contract(self, func_contract: ContractID):
        """Sets the func_contract of this PrivateExecutionRequestBody.


        :param func_contract: The func_contract of this PrivateExecutionRequestBody.
        :type func_contract: ContractID
        """

        self._func_contract = func_contract

    @property
    def consent(self) -> ConsentID:
        """Gets the consent of this PrivateExecutionRequestBody.


        :return: The consent of this PrivateExecutionRequestBody.
        :rtype: ConsentID
        """
        return self._consent

    @consent.setter
    def consent(self, consent: ConsentID):
        """Sets the consent of this PrivateExecutionRequestBody.


        :param consent: The consent of this PrivateExecutionRequestBody.
        :type consent: ConsentID
        """

        self._consent = consent

    @property
    def token(self) -> AccessToken:
        """Gets the token of this PrivateExecutionRequestBody.


        :return: The token of this PrivateExecutionRequestBody.
        :rtype: AccessToken
        """
        return self._token

    @token.setter
    def token(self, token: AccessToken):
        """Sets the token of this PrivateExecutionRequestBody.


        :param token: The token of this PrivateExecutionRequestBody.
        :type token: AccessToken
        """

        self._token = token
