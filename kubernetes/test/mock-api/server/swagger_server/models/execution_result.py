# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_id import DataID  # noqa: F401,E501
from swagger_server.models.execution_metrics import ExecutionMetrics  # noqa: F401,E501
from swagger_server.models.function_id import FunctionID  # noqa: F401,E501
from swagger_server.models.operation_id import OperationID  # noqa: F401,E501
from swagger_server import util


class ExecutionResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: OperationID=None, function: FunctionID=None, data: DataID=None, metrics: ExecutionMetrics=None):  # noqa: E501
        """ExecutionResult - a model defined in Swagger

        :param uuid: The uuid of this ExecutionResult.  # noqa: E501
        :type uuid: OperationID
        :param function: The function of this ExecutionResult.  # noqa: E501
        :type function: FunctionID
        :param data: The data of this ExecutionResult.  # noqa: E501
        :type data: DataID
        :param metrics: The metrics of this ExecutionResult.  # noqa: E501
        :type metrics: ExecutionMetrics
        """
        self.swagger_types = {
            'uuid': OperationID,
            'function': FunctionID,
            'data': DataID,
            'metrics': ExecutionMetrics
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'function': 'function',
            'data': 'data',
            'metrics': 'metrics'
        }
        self._uuid = uuid
        self._function = function
        self._data = data
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt) -> 'ExecutionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExecutionResult of this ExecutionResult.  # noqa: E501
        :rtype: ExecutionResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> OperationID:
        """Gets the uuid of this ExecutionResult.


        :return: The uuid of this ExecutionResult.
        :rtype: OperationID
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: OperationID):
        """Sets the uuid of this ExecutionResult.


        :param uuid: The uuid of this ExecutionResult.
        :type uuid: OperationID
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def function(self) -> FunctionID:
        """Gets the function of this ExecutionResult.


        :return: The function of this ExecutionResult.
        :rtype: FunctionID
        """
        return self._function

    @function.setter
    def function(self, function: FunctionID):
        """Sets the function of this ExecutionResult.


        :param function: The function of this ExecutionResult.
        :type function: FunctionID
        """
        if function is None:
            raise ValueError("Invalid value for `function`, must not be `None`")  # noqa: E501

        self._function = function

    @property
    def data(self) -> DataID:
        """Gets the data of this ExecutionResult.


        :return: The data of this ExecutionResult.
        :rtype: DataID
        """
        return self._data

    @data.setter
    def data(self, data: DataID):
        """Sets the data of this ExecutionResult.


        :param data: The data of this ExecutionResult.
        :type data: DataID
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def metrics(self) -> ExecutionMetrics:
        """Gets the metrics of this ExecutionResult.


        :return: The metrics of this ExecutionResult.
        :rtype: ExecutionMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics: ExecutionMetrics):
        """Sets the metrics of this ExecutionResult.


        :param metrics: The metrics of this ExecutionResult.
        :type metrics: ExecutionMetrics
        """

        self._metrics = metrics
