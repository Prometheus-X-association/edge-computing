# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.metadata import Metadata  # noqa: F401,E501
from swagger_server import util


class ExecutionRequestBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, function: str=None, data: str=None, data_contract: str=None, func_contract: str=None, metadata: Metadata=None):  # noqa: E501
        """ExecutionRequestBody - a model defined in Swagger

        :param function: The function of this ExecutionRequestBody.  # noqa: E501
        :type function: str
        :param data: The data of this ExecutionRequestBody.  # noqa: E501
        :type data: str
        :param data_contract: The data_contract of this ExecutionRequestBody.  # noqa: E501
        :type data_contract: str
        :param func_contract: The func_contract of this ExecutionRequestBody.  # noqa: E501
        :type func_contract: str
        :param metadata: The metadata of this ExecutionRequestBody.  # noqa: E501
        :type metadata: Metadata
        """
        self.swagger_types = {
            'function': str,
            'data': str,
            'data_contract': str,
            'func_contract': str,
            'metadata': Metadata
        }

        self.attribute_map = {
            'function': 'function',
            'data': 'data',
            'data_contract': 'data_contract',
            'func_contract': 'func_contract',
            'metadata': 'metadata'
        }
        self._function = function
        self._data = data
        self._data_contract = data_contract
        self._func_contract = func_contract
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'ExecutionRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExecutionRequestBody of this ExecutionRequestBody.  # noqa: E501
        :rtype: ExecutionRequestBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def function(self) -> str:
        """Gets the function of this ExecutionRequestBody.

        Unique reference/ID of the function to be applied to the private data  # noqa: E501

        :return: The function of this ExecutionRequestBody.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function: str):
        """Sets the function of this ExecutionRequestBody.

        Unique reference/ID of the function to be applied to the private data  # noqa: E501

        :param function: The function of this ExecutionRequestBody.
        :type function: str
        """
        if function is None:
            raise ValueError("Invalid value for `function`, must not be `None`")  # noqa: E501

        self._function = function

    @property
    def data(self) -> str:
        """Gets the data of this ExecutionRequestBody.

        Unique reference/ID of the data  # noqa: E501

        :return: The data of this ExecutionRequestBody.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this ExecutionRequestBody.

        Unique reference/ID of the data  # noqa: E501

        :param data: The data of this ExecutionRequestBody.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def data_contract(self) -> str:
        """Gets the data_contract of this ExecutionRequestBody.

        Unique contract ID  # noqa: E501

        :return: The data_contract of this ExecutionRequestBody.
        :rtype: str
        """
        return self._data_contract

    @data_contract.setter
    def data_contract(self, data_contract: str):
        """Sets the data_contract of this ExecutionRequestBody.

        Unique contract ID  # noqa: E501

        :param data_contract: The data_contract of this ExecutionRequestBody.
        :type data_contract: str
        """
        if data_contract is None:
            raise ValueError("Invalid value for `data_contract`, must not be `None`")  # noqa: E501

        self._data_contract = data_contract

    @property
    def func_contract(self) -> str:
        """Gets the func_contract of this ExecutionRequestBody.

        Unique contract ID  # noqa: E501

        :return: The func_contract of this ExecutionRequestBody.
        :rtype: str
        """
        return self._func_contract

    @func_contract.setter
    def func_contract(self, func_contract: str):
        """Sets the func_contract of this ExecutionRequestBody.

        Unique contract ID  # noqa: E501

        :param func_contract: The func_contract of this ExecutionRequestBody.
        :type func_contract: str
        """
        if func_contract is None:
            raise ValueError("Invalid value for `func_contract`, must not be `None`")  # noqa: E501

        self._func_contract = func_contract

    @property
    def metadata(self) -> Metadata:
        """Gets the metadata of this ExecutionRequestBody.


        :return: The metadata of this ExecutionRequestBody.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Metadata):
        """Sets the metadata of this ExecutionRequestBody.


        :param metadata: The metadata of this ExecutionRequestBody.
        :type metadata: Metadata
        """

        self._metadata = metadata
