apiVersion: v1
kind: ConfigMap
metadata:
  name: pdc-config
  namespace: ptx-edge
data:
  .env: |
    NODE_ENV=production
    PORT=3000
    SESSION_SECRET=abc
    SESSION_COOKIE_EXPIRATION=24000
    MONGO_URI=mongodb://pdc.localhost:27017/dataspace-connector
    WINSTON_LOGS_MAX_FILES=14d
    WINSTON_LOGS_MAX_SIZE=20m
    JWT_BEARER_TOKEN_EXPIRATION=3h
    JWT_REFRESH_TOKEN_EXPIRATION=1d
  config.json: |
    {
      "endpoint": "http://${PDC_ENDPOINT_HOST}:${PDC_ENDPOINT_PORT}/",
      "serviceKey": "${PDC_SERVICE_KEY}",
      "secretKey": "${PDC_SECRET_KEY}",
      "contractUri": "https://contract.visionstrust.com/",
      "catalogUri": "https://api.visionstrust.com/v1/",
      "consentUri": "https://consent.visionstrust.com/v1",
      "expressLimitSize": "100mb"
    }
immutable: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pdc
  namespace: ptx-edge
  labels:
    app: pdc
automountServiceAccountToken: false
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: service-creator
  namespace: ptx-edge
rules:
  - apiGroups: [ "" ]
    resources: [ "services" ]
    verbs: [ "create", "delete" ]
  - apiGroups: [ "discovery.k8s.io" ]
    resources: [ "endpointslices" ]
    verbs: [ "create", "delete" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: service-creator
  namespace: ptx-edge
subjects:
  - kind: ServiceAccount
    name: pdc
    namespace: ptx-edge
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: service-creator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: node-lister
  namespace: ptx-edge
rules:
  - apiGroups: [ "" ]
    resources: [ "nodes" ]
    verbs: [ "list" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-lister
  namespace: ptx-edge
subjects:
  - kind: ServiceAccount
    name: pdc
    namespace: ptx-edge
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-lister
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: pdc
  namespace: ptx-edge
  labels:
    app: pdc
spec:
  selector:
    matchLabels:
      app: pdc
  template:
    metadata:
      labels:
        app: pdc
    spec:
      nodeSelector:
        connector.dataspace.ptx.org/enabled: "true"
      serviceAccountName: pdc
      initContainers:
        - name: builder
          image: ${REGISTRY}:${REGISTRY_PORT}/ptx-edge/builder:1.0
          imagePullPolicy: IfNotPresent
          command: [ "python3", "-m", "app.tools.pdc-init", "-v", "-f" ]
          volumeMounts:
            - name: kube-api-client-cfg
              mountPath: /var/run/secrets/projected
              readOnly: true
          env:
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
        - name: mongodb
          image: ${REGISTRY}:${REGISTRY_PORT}/ptx/mongodb:8.0.5-slim
          imagePullPolicy: IfNotPresent
          ports:
            - name: mongo-port
              containerPort: 27017
          restartPolicy: Always # Native sidecar container
      containers:
        - name: connector
          image: ${REGISTRY}:${REGISTRY_PORT}/ptx/connector:1.9.5-slim
          imagePullPolicy: IfNotPresent
          ports:
            - name: pdc-port
              containerPort: 3000
              protocol: TCP
              hostPort: 30003
          volumeMounts:
            - name: pdc-env
              mountPath: "/usr/src/app/.env.production"
              subPath: .env.production
              readOnly: true
            - name: pdc-config
              mountPath: "/usr/src/app/dist/src/config.production.json"
              subPath: config.production.json
              readOnly: true
          command: [ "npm", "run", "start" ]
      volumes:
        - name: pdc-env
          configMap:
            name: pdc-config
            items:
              - key: .env
                path: .env.production
        - name: pdc-config
          configMap:
            name: pdc-config
            items:
              - key: config.json
                path: config.production.json
        - name: kube-api-client-cfg
          projected:
            defaultMode: 420
            sources:
              - serviceAccountToken:
                  expirationSeconds: 3607
                  path: token
              - configMap:
                  items:
                    - key: ca.crt
                      path: ca.crt
                  name: kube-root-ca.crt
              - downwardAPI:
                  items:
                    - fieldRef:
                        apiVersion: v1
                        fieldPath: metadata.namespace
                      path: namespace