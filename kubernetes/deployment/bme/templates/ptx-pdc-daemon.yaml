apiVersion: v1
kind: ConfigMap
metadata:
  name: ${PDC}-config
  namespace: ${DEF_NS}
  labels:
    app: ${PDC}
data:
  .env: |
    NODE_ENV=production
    PORT=${PDC_DEF_PORT}
    SESSION_SECRET=${SESSION_SECRET}
    SESSION_COOKIE_EXPIRATION=24000
    MONGO_URI=mongodb://127.0.0.1:27017/dataspace-connector
    WINSTON_LOGS_MAX_FILES=14d
    WINSTON_LOGS_MAX_SIZE=20m
    JWT_BEARER_TOKEN_EXPIRATION=3h
    JWT_REFRESH_TOKEN_EXPIRATION=1d
  config-template.json: |
    {
      "endpoint": "${PDC_ENDPOINT}",
      "serviceKey": "${PDC_SERVICE_KEY}",
      "secretKey": "${PDC_SECRET_KEY}",
      "contractUri": "${PTX_CONTRACT_URI}",
      "catalogUri": "${PTX_CATALOG_URI}",
      "consentUri": "${PTX_CONSENT_URI}",
      "expressLimitSize": "100mb"
    }
  entrypoint.sh: |
    #!/usr/bin/env sh
    envsubst <dist/src/config.production.json.template >dist/src/config.production.json
    exec "$@"
immutable: true
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: ${PDC}-secrets
  namespace: ${DEF_NS}
  labels:
    app: ${PDC}
data:
  PDC_SERVICE_KEY: ${PDC_SERVICE_KEY_BASE64_ENCODED}
  PDC_SECRET_KEY: ${PDC_SECRET_KEY_BASE64_ENCODED}
immutable: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${PDC}
  namespace: ${DEF_NS}
  labels:
    app: ${PDC}
automountServiceAccountToken: false
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ${PDC}-init
  namespace: ${DEF_NS}
  labels:
    app: ${PDC}
rules:
  - apiGroups: [ "" ]
    resources: [ "pods" ]
    verbs: [ "patch" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ${PDC}-init
  namespace: ${DEF_NS}
  labels:
    app: ${PDC}
subjects:
  - kind: ServiceAccount
    name: ${PDC}
    namespace: ${DEF_NS}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${PDC}-init
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: node-lister
  namespace: ${DEF_NS}
rules:
  - apiGroups: [ "" ]
    resources: [ "nodes" ]
    verbs: [ "list" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-lister
  namespace: ${DEF_NS}
  labels:
    app: ${PDC}
subjects:
  - kind: ServiceAccount
    name: ${PDC}
    namespace: ${DEF_NS}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-lister
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ${PDC}
  namespace: ${DEF_NS}
  labels:
    app: ${PDC}
spec:
  selector:
    matchLabels:
      app: ${PDC}
  template:
    metadata:
      labels:
        app: ${PDC}
    spec:
      nodeSelector:
        connector.dataspace.ptx.org/enabled: "true"
      serviceAccountName: ${PDC}
      initContainers:
        - name: builder
          image: ${REGISTRY}/ptx-edge/builder:1.0
          imagePullPolicy: IfNotPresent
          command: [ "python3", "-m", "app.tools.pdc-init", "--type=clusterip", "-v" ]
          volumeMounts:
            - name: kube-api-client-cfg
              mountPath: /var/run/secrets/projected
              readOnly: true
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
        - name: mongodb
          image: ${REGISTRY}/ptx/mongodb:8.0.5-slim
          imagePullPolicy: IfNotPresent
          ports:
            - name: mongo-port
              containerPort: 27017
          restartPolicy: Always # Native sidecar container
      containers:
        - name: connector
          image: ${REGISTRY}/ptx/connector:1.9.5-slim
          imagePullPolicy: IfNotPresent
          ports:
            - name: ${PDC}-port
              containerPort: ${PDC_DEF_PORT}
          envFrom:
            - secretRef:
                name: ${PDC}-secrets
          volumeMounts:
            - name: ${PDC}-env
              mountPath: "/usr/src/app/.env.production"
              subPath: .env.production
              readOnly: true
            - name: ${PDC}-config-template
              mountPath: "/usr/src/app/dist/src/config.production.json.template"
              subPath: config.production.json.template
              readOnly: true
            - name: ${PDC}-entrypoint
              mountPath: "/usr/src/app/docker/scripts/entrypoint.sh"
              subPath: entrypoint.sh
              readOnly: true
          command: [ "/bin/sh", "/usr/src/app/docker/scripts/entrypoint.sh" ]
          args: [ "npm", "run", "start" ]
      volumes:
        - name: ${PDC}-env
          configMap:
            name: ${PDC}-config
            items:
              - key: .env
                path: .env.production
        - name: ${PDC}-config-template
          configMap:
            name: ${PDC}-config
            items:
              - key: config-template.json
                path: config.production.json.template
        - name: ${PDC}-entrypoint
          configMap:
            name: ${PDC}-config
            items:
              - key: entrypoint.sh
                path: entrypoint.sh
        - name: kube-api-client-cfg
          projected:
            defaultMode: 420
            sources:
              - serviceAccountToken:
                  expirationSeconds: 3607
                  path: token
              - configMap:
                  items:
                    - key: ca.crt
                      path: ca.crt
                  name: kube-root-ca.crt
              - downwardAPI:
                  items:
                    - fieldRef:
                        apiVersion: v1
                        fieldPath: metadata.namespace
                      path: namespace
---
apiVersion: v1
kind: Service
metadata:
  name: ${PDC}-${DEF_ZONE}
  namespace: ${DEF_NS}
  labels:
    app: ${PDC}
spec:
  selector:
    app: ${PDC}
    privacy-zone.dataspace.ptx.org/${DEF_ZONE}: "true"
  type: ClusterIP
  ports:
    - name: ${PDC}-port
      port: ${PDC_DEF_PORT}